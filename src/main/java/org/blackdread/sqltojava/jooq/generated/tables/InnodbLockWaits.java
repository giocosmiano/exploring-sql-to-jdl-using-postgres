/*
 * This file is generated by jOOQ.
 */
package org.blackdread.sqltojava.jooq.generated.tables;


import org.blackdread.sqltojava.jooq.generated.InformationSchema;
import org.blackdread.sqltojava.jooq.generated.tables.records.InnodbLockWaitsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class InnodbLockWaits extends TableImpl<InnodbLockWaitsRecord> {

    /**
     * The reference instance of <code>information_schema.INNODB_LOCK_WAITS</code>
     */
    public static final InnodbLockWaits INNODB_LOCK_WAITS = new InnodbLockWaits();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.requesting_trx_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> REQUESTING_TRX_ID = createField(DSL.name("requesting_trx_id"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.requested_lock_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> REQUESTED_LOCK_ID = createField(DSL.name("requested_lock_id"), SQLDataType.VARCHAR(81).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.blocking_trx_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> BLOCKING_TRX_ID = createField(DSL.name("blocking_trx_id"), SQLDataType.VARCHAR(18).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.blocking_lock_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> BLOCKING_LOCK_ID = createField(DSL.name("blocking_lock_id"), SQLDataType.VARCHAR(81).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private InnodbLockWaits(Name alias, Table<InnodbLockWaitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnodbLockWaits(Name alias, Table<InnodbLockWaitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.INNODB_LOCK_WAITS</code> table reference
     */
    public InnodbLockWaits(String alias) {
        this(DSL.name(alias), INNODB_LOCK_WAITS);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_LOCK_WAITS</code> table reference
     */
    public InnodbLockWaits(Name alias) {
        this(alias, INNODB_LOCK_WAITS);
    }

    /**
     * Create a <code>information_schema.INNODB_LOCK_WAITS</code> table reference
     */
    public InnodbLockWaits() {
        this(DSL.name("INNODB_LOCK_WAITS"), null);
    }

    public <O extends Record> InnodbLockWaits(Table<O> child, ForeignKey<O, InnodbLockWaitsRecord> key) {
        super(child, key, INNODB_LOCK_WAITS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbLockWaitsRecord> getRecordType() {
        return InnodbLockWaitsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InnodbLockWaits as(String alias) {
        return new InnodbLockWaits(DSL.name(alias), this);
    }

    @Override
    public InnodbLockWaits as(Name alias) {
        return new InnodbLockWaits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbLockWaits rename(String name) {
        return new InnodbLockWaits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbLockWaits rename(Name name) {
        return new InnodbLockWaits(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
