/*
 * This file is generated by jOOQ.
 */
package org.blackdread.sqltojava.jooq.generated.tables;


import org.blackdread.sqltojava.jooq.generated.InformationSchema;
import org.blackdread.sqltojava.jooq.generated.tables.records.InnodbSysTablesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class InnodbSysTables extends TableImpl<InnodbSysTablesRecord> {

    /**
     * The reference instance of <code>information_schema.INNODB_SYS_TABLES</code>
     */
    public static final InnodbSysTables INNODB_SYS_TABLES = new InnodbSysTables();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.TABLE_ID</code>.
     */
    public final TableField<InnodbSysTablesRecord, ULong> TABLE_ID = createField(DSL.name("TABLE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.NAME</code>.
     */
    public final TableField<InnodbSysTablesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(655).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.FLAG</code>.
     */
    public final TableField<InnodbSysTablesRecord, Integer> FLAG = createField(DSL.name("FLAG"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.N_COLS</code>.
     */
    public final TableField<InnodbSysTablesRecord, Integer> N_COLS = createField(DSL.name("N_COLS"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.SPACE</code>.
     */
    public final TableField<InnodbSysTablesRecord, Integer> SPACE = createField(DSL.name("SPACE"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.FILE_FORMAT</code>.
     */
    public final TableField<InnodbSysTablesRecord, String> FILE_FORMAT = createField(DSL.name("FILE_FORMAT"), SQLDataType.VARCHAR(10), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.ROW_FORMAT</code>.
     */
    public final TableField<InnodbSysTablesRecord, String> ROW_FORMAT = createField(DSL.name("ROW_FORMAT"), SQLDataType.VARCHAR(12), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.ZIP_PAGE_SIZE</code>.
     */
    public final TableField<InnodbSysTablesRecord, UInteger> ZIP_PAGE_SIZE = createField(DSL.name("ZIP_PAGE_SIZE"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "");
    /**
     * The column <code>information_schema.INNODB_SYS_TABLES.SPACE_TYPE</code>.
     */
    public final TableField<InnodbSysTablesRecord, String> SPACE_TYPE = createField(DSL.name("SPACE_TYPE"), SQLDataType.VARCHAR(10), this, "");

    private InnodbSysTables(Name alias, Table<InnodbSysTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnodbSysTables(Name alias, Table<InnodbSysTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.INNODB_SYS_TABLES</code> table reference
     */
    public InnodbSysTables(String alias) {
        this(DSL.name(alias), INNODB_SYS_TABLES);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_SYS_TABLES</code> table reference
     */
    public InnodbSysTables(Name alias) {
        this(alias, INNODB_SYS_TABLES);
    }

    /**
     * Create a <code>information_schema.INNODB_SYS_TABLES</code> table reference
     */
    public InnodbSysTables() {
        this(DSL.name("INNODB_SYS_TABLES"), null);
    }

    public <O extends Record> InnodbSysTables(Table<O> child, ForeignKey<O, InnodbSysTablesRecord> key) {
        super(child, key, INNODB_SYS_TABLES);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbSysTablesRecord> getRecordType() {
        return InnodbSysTablesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InnodbSysTables as(String alias) {
        return new InnodbSysTables(DSL.name(alias), this);
    }

    @Override
    public InnodbSysTables as(Name alias) {
        return new InnodbSysTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysTables rename(String name) {
        return new InnodbSysTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysTables rename(Name name) {
        return new InnodbSysTables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, Integer, Integer, Integer, String, String, UInteger, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
